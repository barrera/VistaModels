
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for cpu.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.5.0
//* Generated on: Jan. 02, 2013 05:22:01 PM, (user: markca)
//*>


#include "cpu_pv.h"
#include <iostream>

#include <uvmc.h>
using namespace uvmc;

//constructor
cpu_pv::cpu_pv(sc_module_name module_name) 
  : cpu_pv_base(module_name) {
   SC_THREAD(thread);
   SC_THREAD(objector);
} 

void cpu_pv::objector() {
  uvmc_raise_objection("run");
  wait(done);
  uvmc_drop_objection("run");
}

// This thread can be used to generate outgoing transactions
void cpu_pv::thread() {

  wait (100, SC_NS);
  unsigned char d = 2;
  cpu_master_write(0x40000000, &d, 1);
  cout << sc_time_stamp() << ": loading a with " << (int) d << endl;
  wait (100, SC_NS);
  d = 3;
  cpu_master_write(0x40000004, &d, 1);
  cout << sc_time_stamp() << ": loading b with " << (int) d << endl;

  wait (100, SC_NS);
  d = 0;
  cpu_master_read(0x40000008, &d, 1);
  cout << sc_time_stamp() << ": sum = " << (int) d << endl;

  wait(100, SC_NS);
  done.notify();
}

