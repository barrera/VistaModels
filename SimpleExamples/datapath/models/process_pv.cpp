
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for process.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.2.0RC
//* Generated on: Feb. 23, 2012 08:28:55 AM, (user: jon)
//*>


#include "process_pv.h"
#include <iostream>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
process_pv::process_pv(sc_module_name module_name) 
  : process_pv_base(module_name) 
{ 
  SC_THREAD(thread);
  processFactor = ProcessD;
  // Initialize the size of the transaction queue
  fifo.nb_bound(InputFifoDepth+PipelineStages);
  // Initialize the entries in the queue of process finish times.
  for (int i = 0; i < PipelineStages; i++) pipeInTimeQ.push(SC_ZERO_TIME);
}    

void process_pv::thread() {
  datastruct *ds;
  int proc;
  sc_time startProcT;
  
  for(;;) {
    // Get the next transaction to be processed.  Do not remove it from the queue
    ds = fifo.peek();

    // Calculate the time that we could start processing the transaction, which is the
    // later of the time we received the input or the time the last element finished processing
    startProcT = pipeInTimeQ.front();
    pipeInTimeQ.pop();
    startProcT = (startProcT > ds->startT) ? startProcT : ds->startT;

    // Calculate the time to wait until we can start processing.  This can not be less than 0
    proc = (startProcT/clock) - (sc_time_stamp()/clock);
    proc = (proc < -processFactor) ? -processFactor : proc;
    m_processd = processFactor + proc;

    // Timing policy: Sequential delay TP2.write -> TP1.write of m_processd cycles
    TP1 = (TP1 + 1) % 8; TP2 = (TP2 + 1) % 8;

    // Save the current token information for the upcoming transaction and clear it from the queue
    set_current_token(ds->currentToken);
    fifo.get();
    // Save the time that we finished processing this transaction
    pipeInTimeQ.push(sc_time_stamp());

    y_send(ds->data, ds->size);
    
    free(ds->data);
    free(ds);
  }
}

// Read callback for a port.
// Returns true when successful.
bool process_pv::a_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  cout << sc_time_stamp() << ":" << name() << ".a_callback_read(). Error: Read not supported." << endl;
  return true;
}


// Write callback for a port.
// Returns true when successful.
bool process_pv::a_callback_write(mb_address_type address, unsigned char* data, unsigned size) {

  datastruct * ds = new datastruct;
  int receiveT, throughput;

  // Calculate the cycles until the input transaction will be complete
  throughput = size / getSystemCBaseModel()->get_port_width(a_idx);
  receiveT = throughput + InputD;

  // Save the transaction information in a local datastructure
  ds->address = address;
  ds->data = new unsigned char [size];
  memcpy(ds->data, data, size);
  ds->size = size;
  ds->currentToken = get_current_token();
  ds->startT = sc_time_stamp() + (receiveT * clock);

  // Put the transaction datastruct into the queue to be processed
  fifo.put(ds);

  return true;
}


unsigned process_pv::a_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  // This just forwards the request.  It may need to return local data if appropriate.
  y_read_dbg(address, data, size);
  return true;
}

unsigned process_pv::a_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  // This just forwards the request.  It may need to modify local data if appropriate.
  y_write_dbg(address, data, size);
  return true;
}

bool process_pv::a_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  // This just forwards the request.  It may need to return a pointer to local data if appropriate.
  y_get_direct_memory_prt(address, dmiData);
  return true;
}
