
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for switch.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.4.0
//* Generated on: Jun. 01, 2012 12:32:14 PM, (user: jon)
//*>


#pragma once

#include "switch_model.h"

using namespace tlm;

//This class inherits from the switch_pv_base class
class switch_pv : public switch_pv_base {
 public:
  typedef esl::tlm_types::Address mb_address_type;
 public:
  // Constructor
  // Do not add parameters here.
  // To add parameters - use the Model Builder form (under PV->Parameters tab)
  SC_HAS_PROCESS(switch_pv);
  switch_pv(sc_core::sc_module_name module_name);   

 protected:
  ////////////////////////////////////////
  // target ports read callbacks
  ////////////////////////////////////////  
  bool a_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned a_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size);  
  bool b_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned b_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size);  

 protected:
  ////////////////////////////////////////
  // target ports write callbacks
  ////////////////////////////////////////  
  bool a_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned a_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size);  
  bool a_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);  
  bool b_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned b_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size);  
  bool b_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);   

  bool y_send(unsigned char * data, unsigned size) {
    y_write(0x0, data, size, 4);
  }

  tlm::tlm_fifo< datastruct *> fifo_a;
  tlm::tlm_fifo< datastruct *> fifo_b;
};

