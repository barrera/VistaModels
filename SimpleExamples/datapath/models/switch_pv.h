/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for switch.
//* This is a template file: You may modify this file to implement the
//* behavior of your component.
//*
//* Model Builder version: 3.4.0
//* Generated on: Jun. 01, 2012 12:32:14 PM, (user: jon)
//*>


#pragma once

#include "switch_model.h"
#include "datastruct.h"

using namespace tlm;

//This class inherits from the switch_pv_base class
class switch_pv : public switch_pv_base
{
public:
    typedef esl::tlm_types::Address mb_address_type;
public:
    // Constructor
    // Do not add parameters here.
    // To add parameters - use the Model Builder form (under PV->Parameters tab)
    SC_HAS_PROCESS(switch_pv);
    switch_pv(sc_core::sc_module_name module_name);

    void general_thread(int index,
                        bool (switch_pv_base::*writeMethod)(mb_address_type, unsigned char *, unsigned, unsigned),
                        mb::mb_variable<int>& deltaVar,
                        mb::mb_variable<int>& startVar,
                        mb::mb_variable<int>& stopVar);
    void thread1();
    void thread2();
    void thread3();
    void thread4();
    void thread5();
    void thread6();
    void thread7();
    void thread8();

protected:
    ////////////////////////////////////////
    // target ports write callbacks
    ////////////////////////////////////////
bool general_write(mb_address_type address,
                    unsigned char* data,
                    unsigned int size,
                    port_enum idx,
                    tlm::tlm_fifo<datastruct *>& fifo,
                    mb::mb_variable<int>& deltaVar,
                    mb::mb_variable<int>& startVar,
                    mb::mb_variable<int>& stopVar);

    bool slave_1a_callback_write(mb_address_type address, unsigned char* data, unsigned size);
    bool slave_1b_callback_write(mb_address_type address, unsigned char* data, unsigned size);
    bool slave_2a_callback_write(mb_address_type address, unsigned char* data, unsigned size);
    bool slave_2b_callback_write(mb_address_type address, unsigned char* data, unsigned size);
    bool slave_3a_callback_write(mb_address_type address, unsigned char* data, unsigned size);
    bool slave_3b_callback_write(mb_address_type address, unsigned char* data, unsigned size);
    bool slave_4a_callback_write(mb_address_type address, unsigned char* data, unsigned size);
    bool slave_4b_callback_write(mb_address_type address, unsigned char* data, unsigned size);
    bool slave_5a_callback_write(mb_address_type address, unsigned char* data, unsigned size);
    bool slave_5b_callback_write(mb_address_type address, unsigned char* data, unsigned size);
    bool slave_6a_callback_write(mb_address_type address, unsigned char* data, unsigned size);
    bool slave_6b_callback_write(mb_address_type address, unsigned char* data, unsigned size);
    bool slave_7a_callback_write(mb_address_type address, unsigned char* data, unsigned size);
    bool slave_7b_callback_write(mb_address_type address, unsigned char* data, unsigned size);
    bool slave_8a_callback_write(mb_address_type address, unsigned char* data, unsigned size);
    bool slave_8b_callback_write(mb_address_type address, unsigned char* data, unsigned size);

#define NumberOfPorts 8
    tlm::tlm_fifo< datastruct *> fifo_a[NumberOfPorts];
    tlm::tlm_fifo< datastruct *> fifo_b[NumberOfPorts];
    queue<sc_time> pipeInTime_a[NumberOfPorts];
    queue<sc_time> pipeInTime_b[NumberOfPorts];
};

