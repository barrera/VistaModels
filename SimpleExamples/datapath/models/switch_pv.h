
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for switch.
//* This is a template file: You may modify this file to implement the
//* behavior of your component.
//*
//* Model Builder version: 3.4.0
//* Generated on: Jun. 01, 2012 12:32:14 PM, (user: jon)
//*>


#pragma once

#include "switch_model.h"
#include "datastruct.h"

using namespace tlm;

//This class inherits from the switch_pv_base class
class switch_pv : public switch_pv_base {
 public:
  typedef esl::tlm_types::Address mb_address_type;
 public:
  // Constructor
  // Do not add parameters here.
  // To add parameters - use the Model Builder form (under PV->Parameters tab)
  SC_HAS_PROCESS(switch_pv);
  switch_pv(sc_core::sc_module_name module_name);

  void thread1();

  bool addToQueue(mb_address_type address,
                  unsigned char* data,
                  unsigned int size,
                  int receiveT,
                  tlm::tlm_fifo<datastruct *> & fifo);

 protected:
  ////////////////////////////////////////
  // target ports write callbacks
  ////////////////////////////////////////
  bool slave_1a_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  bool slave_1b_callback_write(mb_address_type address, unsigned char* data, unsigned size);

  tlm::tlm_fifo< datastruct *> fifo_1a;
  tlm::tlm_fifo< datastruct *> fifo_1b;
};

