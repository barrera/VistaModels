
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected. 
//* DO NOT MODIFY THIS FILE.
//*
//* This file is generated according to the parameters in the 
//* Model Builder form.
//* This class contains the infrastructure to define the behavior of the component.
//* The sink_pv will be derived from this class.
//*
//* Model Builder version: 3.2.0
//* Generated on: Feb. 29, 2012 03:31:59 AM, (user: jon)
//*>


#pragma once

#include "model_builder.h"
#ifdef MODEL_BUILDER_VERSION_NUMBER
#if 320 != MODEL_BUILDER_VERSION_NUMBER
#error "This model was generated using Model Builder 3.2.0. Please regenerate model."
#endif
#else
#error "Please regenerate model."
#endif




#include "generic_protocol.h"

using namespace ::tlm;

class sink_pv_base;
class sink_pv_base_mb_compatibility : public mb::mb_module {
  friend class sink_pv_base;
 public:
  typedef unsigned int mb_address_type;
 protected:
  sink_pv_base_mb_compatibility(sc_core::sc_module_name& module_name)
    : mb::mb_module(module_name) {}

  ////////////////////////////////////////
  // functions for target port: s
  ////////////////////////////////////////
  protected:
   virtual bool s_callback_read(mb_address_type address,
                                                      unsigned char* data,
                                                      unsigned size) {
     return true;
   }
   virtual bool s_callback_write(mb_address_type address,
                                                       unsigned char* data,
                                                       unsigned size) {
     return true;
   }
   virtual unsigned s_callback_read_dbg(mb_address_type address,
                                                              unsigned char* data,
                                                              unsigned size) {
     return 0;
   }
   virtual unsigned s_callback_write_dbg(mb_address_type address,
                                                               unsigned char* data,
                                                               unsigned size) {
     return 0;
   }
   virtual bool s_get_direct_memory_ptr(mb_address_type address,
                                                              tlm::tlm_dmi& dmiData) {
     return false;
   } 
};

class sink_pv_base : public sink_pv_base_mb_compatibility {
 private:
  typedef sink_pv_base_mb_compatibility mb_compatibility_class;
 public:
  typedef esl::tlm_types::Address mb_address_type;
 public:
  typedef sink_pv_base self;
  SC_HAS_PROCESS(sink_pv_base);
  sink_pv_base(sc_core::sc_module_name& module_name);
  void print_parameters();
  
  enum port_enum {s_idx };
  
 private:

  mb::tlm20::fw_process<tlm::tlm_base_protocol_types> m_s_fw_process;

 protected:

  virtual void s_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans, sc_core::sc_time& t) {
    bool status;

    if (mb_debug) {
      std::cout.unsetf(std::ios::showbase);
      bool isWrite = trans.is_write();
      unsigned char* data = trans.get_data_ptr();
      sc_dt::uint64 address = trans.get_address();
      unsigned size = trans.get_data_length();
      std::cout << this->name() << "::s_callback_" <<
        (isWrite ? "write" : "read") << ", address = 0x" << std::hex << address;
      if (isWrite) {
        std::cout << ", data = {";
        std::cout << std::hex;
        for (unsigned u=0; u<size; u++) {
          std::cout << "0x" << (unsigned int)(data[u]);
          if (u+1 != size) {
            std::cout << ", ";
          }
        }
        std::cout << std::dec << "}";
      }
      std::cout << ", size = " << std::dec << size << std::endl;
    }
    
    if (trans.is_write()) {
      status = s_callback_write(trans.get_address(), trans.get_data_ptr(), trans.get_data_length());
    } else if (trans.is_read()) {
      status = s_callback_read(trans.get_address(), trans.get_data_ptr(), trans.get_data_length());
    } else {
      status = false;
    }
    trans.set_response_status(status ? TLM_OK_RESPONSE : TLM_GENERIC_ERROR_RESPONSE);
  }

  virtual unsigned s_callback_dbg(tlm::tlm_base_protocol_types::tlm_payload_type& trans) {
    
    if (trans.is_write()) {
      return s_callback_write_dbg(trans.get_address(), trans.get_data_ptr(), trans.get_data_length());
    } else if (trans.is_read()) {
      return s_callback_read_dbg(trans.get_address(), trans.get_data_ptr(), trans.get_data_length());
    } else {
      return 0;
    }
  }

  virtual bool s_get_direct_memory_ptr_callback(tlm::tlm_base_protocol_types::tlm_payload_type& trans,
                                                                      tlm::tlm_dmi& dmiData) {
    if (trans.get_command() == tlm::TLM_IGNORE_COMMAND)
      return false;
    payload_on_stack = &trans;
    bool ret_value = s_get_direct_memory_ptr(trans.get_address(), dmiData);
    payload_on_stack = 0;
    return ret_value;
  }

  

  

  

 protected:




  tlm::tlm_generic_payload* payload_on_stack;



  ////////////////////////////////////////
  // functions for target port: s
  ////////////////////////////////////////
  protected:
  virtual bool s_callback_read(mb_address_type address,
                                                      unsigned char* data,
                                                      unsigned size) {
    mb_address_type local_address = address;
     mb_compatibility_class *This = this;
     return This->s_callback_read(mb_compatibility_class::mb_address_type(local_address),
                                                        data,
                                                        size);
   }
   virtual bool s_callback_write(mb_address_type address,
                                                       unsigned char* data,
                                                       unsigned size) {
     mb_address_type local_address = address;
     mb_compatibility_class *This = this;
     return This->s_callback_write(mb_compatibility_class::mb_address_type(local_address),
                                                         data,
                                                         size);
   }

   virtual unsigned s_callback_read_dbg(mb_address_type address,
                                                              unsigned char* data,
                                                              unsigned size) {
     mb_compatibility_class *This = this;
     return This->s_callback_read_dbg(mb_compatibility_class::mb_address_type(address),
                                                            data,
                                                            size);
   }
   virtual unsigned s_callback_write_dbg(mb_address_type address,
                                                               unsigned char* data,
                                                               unsigned size) {
     mb_compatibility_class *This = this;
     return This->s_callback_write_dbg(mb_compatibility_class::mb_address_type(address),
                                                             data,
                                                             size);
   }
   virtual bool s_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
     mb_compatibility_class *This = this;
     return This->s_get_direct_memory_ptr(mb_compatibility_class::mb_address_type(address), dmiData);
   } 

   
  
  
 

 public:
  typedef tlm::tlm_base_protocol_types s_protocol_types;
  typedef tlm::tlm_base_protocol_types::tlm_payload_type s_payload_type;

 public:
  // port declarations 

  tlm::tlm_target_socket <32, tlm::tlm_base_protocol_types> s;  

 
  
 protected:
  sc_core::sc_time clock;
  sc_core::sc_time generic_clock;
  double nominal_voltage;
  bool mb_debug;
  bool verbose_parameters;
  unsigned int s_pipeline_length;

  

 protected:
};



/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected.
//* DO NOT MODIFY THIS FILE.
//*
//* This file is used only for learning the component.
//* It contains the machine architecture class for your sink model.
//* 
//* Model Builder version: 3.2.0
//* Generated on: Feb. 29, 2012 03:31:59 AM, (user: jon)
//*>


#pragma once

#include "model_builder.h"


class sink_machine_arch : public MachineArch { 
    
    public:
    
    public:
        
        ////////////////////////////////////////////////////////////////////
        //   function for port: s
        ////////////////////////////////////////////////////////////////////
        
        //////
        // functions for port: s, transaction: READ
        //////
        
        void transaction_instance__s__READ
          (
            sc_dt::uint64 address,
            sc_dt::uint64 size,
            sc_dt::uint64 data, 
            bool has_been_error, 
            sc_dt::uint64 currentTime
          );
        
        //////
        // functions for port: s, transaction: WRITE
        //////
        
        void transaction_instance__s__WRITE
          (
            sc_dt::uint64 address,
            sc_dt::uint64 size,
            sc_dt::uint64 data, 
            bool has_been_error, 
            sc_dt::uint64 currentTime
          );
        
        
    
    public:
        void configureClock(unsigned portIndex, sc_dt::uint64 clock) {
          m_clocks[portIndex] = clock;
        }
        void startTransaction(unsigned portIndex, unsigned transactionIndex, sc_dt::uint64 currentTime);
        VariableBase* getVariableBasePtrByName(const char* name);
        Register* getRegisterByName(const char* name);
        virtual void reset();
        
        virtual bool getAddressRange(unsigned portIndex, sc_dt::uint64& begin, sc_dt::uint64& end);
        
    
    public:
        void callTransaction(unsigned portIndex, unsigned transactionIndex, sc_dt::uint64 address, sc_dt::uint64 size, sc_dt::uint64 data, bool has_been_error, sc_dt::uint64 currentTime);
    
    public:
        //constructor
        sink_machine_arch();
    
};

/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected. 
//* DO NOT MODIFY THIS FILE.
//*
//* This file is generated according to the parameters in the 
//* Model Builder form.
//* 
//* Any change in parameters, policies, ports, protocols, etc. will change this file
//* upon generation of the timing model (using generate_timing_model command).
//* The sink_t will be derived from this class.
//*
//* Model Builder version: 3.2.0
//* Generated on: Feb. 29, 2012 03:31:59 AM, (user: jon)
//*>


#pragma once

#include "model_builder.h"
#include "generic_protocol.h"
 


class sink_t_base : public papoulis::SystemCBaseModel {
public:
  static sink_t_base* create_t(const char* _name, long simulation);
public:
  sink_t_base(sc_core::sc_module_name& module_name, long simulation);
 
  enum port_enum {s};

protected:
  // The following callbacks are called whenever there is a transaction start or end in the port
  // If you want to add your own code (like updating the machine architecture object), 
  // you have to overload these functions in your derived class.

  virtual void accept_generic_READ
    (long port_index,
     sc_dt::int64 time,
     long& burst_size,
     sc_dt::uint64 ADDR,
     sc_dt::uint64 rDATA,
     sc_dt::uint64& PRIORITY,
     sc_dt::uint64& BURST,
     sc_dt::uint64 SIZE,
     sc_dt::uint64& STATUS) {};
  virtual void end_generic_READ
    (long port_index,
     sc_dt::uint64 time,
     long& burst_size,
     sc_dt::uint64 ADDR,
     sc_dt::uint64 rDATA,
     sc_dt::uint64& PRIORITY,
     sc_dt::uint64& BURST,
     sc_dt::uint64 SIZE,
     sc_dt::uint64& STATUS) {};

  virtual void accept_generic_WRITE
    (long port_index,
     sc_dt::int64 time,
     long& burst_size,
     sc_dt::uint64 ADDR,
     sc_dt::uint64 wDATA,
     sc_dt::uint64& PRIORITY,
     sc_dt::uint64& BURST,
     sc_dt::uint64 SIZE,
     sc_dt::uint64& STATUS) {};
  virtual void end_generic_WRITE
    (long port_index,
     sc_dt::uint64 time,
     long& burst_size,
     sc_dt::uint64 ADDR,
     sc_dt::uint64 wDATA,
     sc_dt::uint64& PRIORITY,
     sc_dt::uint64& BURST,
     sc_dt::uint64 SIZE,
     sc_dt::uint64& STATUS) {};


public:
  virtual sink_machine_arch* getMachineArch() const {
    return m_machineArch;
  }

  virtual bool portHasRegisters(unsigned portIndex);
  
  virtual bool triggerRegistersGotHit(unsigned portIndex, tlm::tlm_generic_payload& trans);

protected:
  /* schedule functions */
  
protected:
  /* machine architecture */
  sink_machine_arch* m_machineArch;

protected:
  friend class sink_model;
  
  

protected:
  // parameters
  sc_core::sc_time clock;
  sc_core::sc_time generic_clock;
  double nominal_voltage;
  bool mb_debug;
  bool verbose_parameters;
  unsigned int s_pipeline_length;

protected:
  long m_simulation;

 
  

  static const unsigned port_count = 1;
  papoulis::SystemCBaseModel::PortDescription port_descriptions[port_count];
  
  

protected:
  std::vector<esl::sc_sim::pipeline_policy*> m_pipeline_vector;
  std::vector<esl::sc_sim::sequential_policy*> m_sequential_vector;
  std::vector<esl::sc_sim::delay_policy*> m_delay_vector;
  std::vector<esl::sc_sim::uniform_bus_policy*> m_bus_vector;
  std::vector<esl::sc_sim::power_policy*> m_power_vector;
  std::vector<esl::sc_sim::state_power_policy*> m_state_power_vector;
public:
  virtual void update_sync_all();
  virtual void update_pipeline_parameters(esl::sc_sim::pipeline_policy* handle);
  virtual void update_sequential_parameters(esl::sc_sim::sequential_policy* handle);
  virtual void update_delay_parameters(esl::sc_sim::delay_policy* handle);
  virtual void update_bus_parameters(esl::sc_sim::uniform_bus_policy* handle);
  virtual void update_power_parameters(esl::sc_sim::power_policy* handle);
  virtual void update_state_power_parameters(esl::sc_sim::state_power_policy* handle);
protected: /* InterfaceFunctions */
  virtual TransactionCallbackFunctionPointer getTransactionCallback(unsigned callbackIndex);
  config::real80 get_state_power();
protected:

  void start_transaction_generic_READ
    (esl::include::TRequest* request,
     unsigned port_index,
     sc_dt::uint64 startTime,
     sc_dt::uint64 endTime,
     sc_dt::uint64* parameters,
     bool hasBeenError);
  void end_transaction_generic_READ
    (esl::include::TRequest* request,
     unsigned port_index,
     sc_dt::uint64 startTime,
     sc_dt::uint64 endTime,
     sc_dt::uint64* parameters,
     bool hasBeenError);
  void start_transaction_generic_WRITE
    (esl::include::TRequest* request,
     unsigned port_index,
     sc_dt::uint64 startTime,
     sc_dt::uint64 endTime,
     sc_dt::uint64* parameters,
     bool hasBeenError);
  void end_transaction_generic_WRITE
    (esl::include::TRequest* request,
     unsigned port_index,
     sc_dt::uint64 startTime,
     sc_dt::uint64 endTime,
     sc_dt::uint64* parameters,
     bool hasBeenError);
};

/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected.
//* DO NOT MODIFY THIS FILE.
//*
//* This file contains the PVT class for sink.
//* It connects between the PV and T models.
//* Your top-level design should instantiate this model.
//* 
//* In order to synchronize the activty between the PV and the T models, every 
//* PV transaction is monitored and queued in the T sync ports.
//* Whenever a synchronization point is reached, the T models are executed and 
//* the corresponding T transactions are launched.
//* A synchronization point is reached whenever there is a wait statement on a testbench thread. 
//*
//* Model Builder version: 3.2.0
//* Generated on: Feb. 29, 2012 03:31:59 AM, (user: jon)
//*>

#pragma once

#include "model_builder.h"



 


// forward declaration for pv class
class sink_pv;



class sink_pvt_param_defaults {
  
public:
  sink_pvt_param_defaults(const char* hier_name) {

    sc_core::sc_time clock;
    sc_core::sc_time generic_clock;
    double nominal_voltage;
    bool mb_debug;
    bool verbose_parameters;
    unsigned int s_pipeline_length;
    clock = ::mb::sysc::sdInitParameter<sc_core::sc_time>("clock", sc_core::sc_time(10, sc_core::SC_NS), hier_name);
    generic_clock = ::mb::sysc::sdInitParameter<sc_core::sc_time>("generic_clock", clock, hier_name);
    nominal_voltage = ::mb::sysc::sdInitParameter<double>("nominal_voltage", 1, hier_name);
    mb_debug = ::mb::sysc::sdInitParameter<bool>("mb_debug", false, hier_name);
    verbose_parameters = ::mb::sysc::sdInitParameter<bool>("verbose_parameters", true, hier_name);
    s_pipeline_length = ::mb::sysc::sdInitParameter<unsigned int>("s_pipeline_length", 2, hier_name);
    ::mb::sysc::sdPropagateParameters();
  }
};

class sink_pvt : public esl::sc_sim::PVTBaseModel, 
                          public mb::utl::cb_owner, 
                          private sink_pvt_param_defaults {

 public:
  typedef sink_pvt self_type;

 public: 
  // Constructor
  sink_pvt(sc_core::sc_module_name module_name); 
  ~sink_pvt(); 

 public:
    //access the T instance
  inline sink_t_base* getT() const {
    return m_sink_t;
  }
  
  //access the PV instance
  inline sink_pv* getPV() const {
    return m_sink_pv;
  }

  virtual SystemCBaseModel* getSystemCBaseModel() const {
    return getT();
  }

 private:
  void bind();
  


 private:
  //T instance
  sink_t_base* m_sink_t;
  
  //PV instance
  sink_pv* m_sink_pv;

 public:
  // External ports

  typedef esl::sc_sim::pvt_target_socket<32, tlm::tlm_base_protocol_types, 1, sc_core::SC_ONE_OR_MORE_BOUND> s_type;
  s_type s;

 private:
  // PV connection ports

  typedef mb::tlm20::initiator_socket_cb<32> s_entry_type;
  s_entry_type s_entry;     

 private:



  struct s_nb_connector : public tlm::tlm_bw_nonblocking_transport_if<>, public ::mb::tlm20::socket_tracer_holder {
    sink_pvt& m_owner;
    s_nb_connector(sink_pvt& owner) : m_owner(owner) {
    }
    virtual tlm::tlm_sync_enum nb_transport_bw(tlm::tlm_generic_payload& trans, 
                                               tlm::tlm_phase& phase, 
                                               sc_core::sc_time& t) {
      return m_owner.s.nb_transport_bw((tlm::tlm_base_protocol_types::tlm_payload_type&)trans, phase, t);
    }
    virtual ::mb::tlm20::socket_tracer *get_socket_tracer() {
      return &m_owner.s;
    }
  };
  friend struct s_nb_connector;
  s_nb_connector m_s_nb_connector;



  tlm::tlm_sync_enum receive_nb_transport_s(tlm::tlm_generic_payload& trans,
                                                    tlm::tlm_phase& phase,
                                                    sc_core::sc_time& t) {
    return getT()->receive_nb_transport(0, trans, phase, t);
  }

};


