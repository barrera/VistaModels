
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for stream_fifo.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.2.0
//* Generated on: Mar. 07, 2012 06:12:32 PM, (user: jon)
//*>


#pragma once

#include "stream_fifo_model.h"

using namespace tlm;

//This class inherits from the stream_fifo_pv_base class
class stream_fifo_pv : public stream_fifo_pv_base {
 public:
  typedef esl::tlm_types::Address mb_address_type;
 public:
  // Constructor
  // Do not add parameters here.
  // To add parameters - use the Model Builder form (under PV->Parameters tab)
  SC_HAS_PROCESS(stream_fifo_pv);
  stream_fifo_pv(sc_core::sc_module_name module_name);   

 protected:
  ////////////////////////////////////////
  // target ports read callbacks
  //////////////////////////////////////// 
  bool din_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned din_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool config_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned config_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size); 

 protected:
  ////////////////////////////////////////
  // target ports write callbacks
  //////////////////////////////////////// 
  bool din_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned din_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool din_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData); 
  bool config_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned config_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool config_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);   
};

