
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for driver.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.2.0
//* Generated on: Mar. 07, 2012 03:39:48 PM, (user: mbradley)
//*>


#include "driver_pv.h"
#include <iostream>
#include "datastruct.h"

//constructor
driver_pv::driver_pv(sc_module_name module_name) 
  : driver_pv_base(module_name) {
   SC_THREAD(thread);
} 

void driver_pv::thread()
{
    unsigned int d[16] = {0x00112233, 0x11223344, 0x22334455, 0x33445566
                         ,0x44556677, 0x55667788, 0x66778899, 0x778899AA
                         ,0x8899AABB, 0x99AABBCC, 0xAABBCCDD, 0xBBCCDDEE
                         ,0xCCDDEEFF, 0xDDEEFF00, 0xEEFF0011, 0xFF001122
                   };
    packet_t pkt;

    // build packet
    pkt.iaddr = 0x99;
    pkt.data  = (unsigned char*)(d);
    pkt.dataSize = sizeof(d);
    pkt.startT = sc_time_stamp();

    // note: packet not used below, as we want a simple data size for FIFO debug and analysis

    //for (int i=0; i<100000; i++)
    for (int i=0; i<1; i++)
    {
        wait(10*generic_clock);

        for (int i=0; i<4; i++)
        {
            mout_write(0x0, d, 8);
            wait(4*generic_clock);
        }

        wait(200*generic_clock);


        for (int i=0; i<4; i++)
        {
            mout_write(0x0, d, 8);
            wait(100*generic_clock);
        }
    }

    wait(50*generic_clock);
}


