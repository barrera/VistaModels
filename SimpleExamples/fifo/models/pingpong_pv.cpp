
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for pingpong.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.1.1
//* Generated on: Aug. 08, 2011 07:55:08 AM, (user: jon)
//* Automatically merged on: Aug. 16, 2011 04:43:45 PM, (user: jon)
//* Automatically merged on: Sep. 26, 2011 07:41:20 AM, (user: jon)
//* Automatically merged on: Jan. 24, 2012 07:43:18 AM, (user: jon)
//*>


#include "pingpong_pv.h"
#include <iostream>
#include "datastruct.h"

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
pingpong_pv::pingpong_pv(sc_module_name module_name) 
  : pingpong_pv_base(module_name) {

  SC_THREAD(thread);
} 

void pingpong_pv::thread() {
  unsigned char *data1;
  unsigned char *data2;

  unsigned int addr1 = 0x0, addr2 = 0x0;

  for (;;) {
    wait(m1ev | m2ev);

    while (m1todo > 0 || m2todo > 0) {
      if (m1todo != 0) {
        m1todo -= 1;
        data1 = (unsigned char *) malloc (mBufSize);
        m1_read(addr1, data1, mBufSize);
        y_write(0x0, data1, mBufSize);
        addr1 = ((addr1 + mBufSize) >= mAddrMax) ? 0x0 : addr1 + mBufSize;
        free(data1);
      }
      if (m2todo != 0) {
        m2todo -= 1;
        data2 = (unsigned char *) malloc (mBufSize);
        m2_read(addr2, data2, mBufSize);
        y_write(0x0, data2, mBufSize);
        addr2 = ((addr2 + mBufSize) >= mAddrMax) ? 0x0 : addr2 + mBufSize;
        free(data2);
      }
    }
  }
}

// Read callback for d1 port.
// Returns true when successful.
bool pingpong_pv::d1_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}


// Read callback for d2 port.
// Returns true when successful.
bool pingpong_pv::d2_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}


// Write callback for d1 port.
// Returns true when successful.
bool pingpong_pv::d1_callback_write(mb_address_type address, unsigned char* data, unsigned size) {

  unsigned writensize;

  unsigned int *dataint = (unsigned int *) data;
  cout << "d1_callback_write data = " << *dataint << endl;

  writensize = ((m1addr + size) <= mAddrMax) ? size : (mAddrMax - m1addr);
  m1_write(m1addr, data, writensize);

  m1count += writensize;
  m1addr += writensize;
  if (m1count >= mBufSize) {
    m1todo += 1;
    m1ev.notify(SC_ZERO_TIME);
    m1count -= mBufSize;
    if (m1addr >= mAddrMax) {
      m1addr = 0x0;
      if (size > writensize) {
        m1count += (size-writensize);
        m1_write(m1addr, data+writensize, size-writensize);
      }
    }
  }
  
  return true;
}


// Write callback for d2 port.
// Returns true when successful.
bool pingpong_pv::d2_callback_write(mb_address_type address, unsigned char* data, unsigned size) {

  unsigned writensize;

  unsigned int *dataint = (unsigned int *) data;
  cout << "d2_callback_write data = " << *dataint << endl;

  writensize = ((m2addr + size) <= mAddrMax) ? size : (mAddrMax - m2addr);
  m2_write(m2addr, data, writensize);

  m2count += writensize;
  m2addr += writensize;
  if (m2count >= mBufSize) {
    m2todo += 1;
    m2ev.notify(SC_ZERO_TIME);
    m2count -= mBufSize;
    if (m2addr >= mAddrMax) {
      m2addr = 0x0;
      if (size > writensize) {
        m2count += (size-writensize);
        m2_write(m2addr, data+writensize, size-writensize);
      }
    }
  }
  
  return true;
}


unsigned pingpong_pv::d1_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
}

unsigned pingpong_pv::d1_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
}

bool pingpong_pv::d1_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}



unsigned pingpong_pv::d2_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
}

unsigned pingpong_pv::d2_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
}

bool pingpong_pv::d2_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}

