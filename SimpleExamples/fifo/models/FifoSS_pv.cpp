
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for FifoSS.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 1.7.0.beta2
//* Generated on: Mar. 07, 2010 04:57:11 AM, (user: jon)
//* Automatically merged on: Jul. 02, 2010 02:43:32 PM, (user: jon)
//* Automatically merged on: Feb. 03, 2011 04:11:50 PM, (user: jon)
//* Automatically merged on: Sep. 26, 2011 07:41:19 AM, (user: jon)
//* Automatically merged on: Jan. 24, 2012 07:43:17 AM, (user: jon)
//*>

 
#include "FifoSS_pv.h"
#include <iostream>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
FifoSS_pv::FifoSS_pv(sc_module_name module_name) 
  : FifoSS_pv_base(module_name),
    m_count(0)
{
  count = m_count;
  PowerFactor = 100;
  fifo_ds.nb_bound(FFSIZE);
}   

// Read callback for d_in port.
// Returns true when successful.
bool FifoSS_pv::d_in_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  return true;
}

// Read callback for d_out port.
// Returns true when successful.
bool FifoSS_pv::d_out_callback_read(mb_address_type address, unsigned char* data, unsigned size) {

  m_ds_o = fifo_ds.get();
  start_read = 1;
  m_count -= 1;
  count = m_count;
  memcpy(data, (unsigned char *)m_ds_o, sizeof(datastruct));
  free(m_ds_o);

  return true;
}


// Write callback for d_in port.
// Returns true when successful.
bool FifoSS_pv::d_in_callback_write(mb_address_type address, unsigned char* data, unsigned size) {

  m_ds_i = new datastruct;
  memcpy((unsigned char *)m_ds_i, data, sizeof(datastruct));
  fifo_ds.put(m_ds_i); 
  m_count += 1;
  count = m_count;
  start_write = 1;

  return true;
}


// Write callback for d_out port.
// Returns true when successful.
bool FifoSS_pv::d_out_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}


unsigned FifoSS_pv::d_in_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
}

unsigned FifoSS_pv::d_in_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
}

bool FifoSS_pv::d_in_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}



unsigned FifoSS_pv::d_out_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
}

unsigned FifoSS_pv::d_out_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
}

bool FifoSS_pv::d_out_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}


