
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for SinkS.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 1.7.0.beta2
//* Generated on: Mar. 07, 2010 05:00:30 AM, (user: jon)
//* Automatically merged on: Jul. 02, 2010 02:43:33 PM, (user: jon)
//* Automatically merged on: Feb. 03, 2011 04:11:53 PM, (user: jon)
//* Automatically merged on: Sep. 26, 2011 07:41:20 AM, (user: jon)
//* Automatically merged on: Jan. 24, 2012 07:43:19 AM, (user: jon)
//*>


#include "SinkS_pv.h"
#include <iostream>
#include "datastruct.h"

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
SinkS_pv::SinkS_pv(sc_module_name module_name) 
  : SinkS_pv_base(module_name) {
}    

// Read callback for d_in port.
// Returns true when successful.
bool SinkS_pv::d_in_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}


// Write callback for d_in port.
// Returns true when successful.
bool SinkS_pv::d_in_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  datastruct *dptr = (datastruct *) data;
  cout << sc_time_stamp() << ":" << name() << " received id = " << dptr->id << ", d = " << dptr->d << endl;

  return true;
}


unsigned SinkS_pv::d_in_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
}

unsigned SinkS_pv::d_in_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
}

bool SinkS_pv::d_in_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}


