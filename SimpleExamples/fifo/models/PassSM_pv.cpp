
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for PassSM.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 1.7.0.beta2
//* Generated on: Mar. 07, 2010 04:53:57 AM, (user: jon)
//* Automatically merged on: Jul. 15, 2010 11:42:19 AM, (user: jon)
//* Automatically merged on: Feb. 03, 2011 04:11:53 PM, (user: jon)
//* Automatically merged on: Jun. 22, 2011 08:52:58 AM, (user: jon)
//* Automatically merged on: Jun. 22, 2011 09:08:16 AM, (user: jon)
//* Automatically merged on: Aug. 19, 2011 04:35:46 PM, (user: jon)
//* Automatically merged on: Sep. 26, 2011 07:41:20 AM, (user: jon)
//* Automatically merged on: Jan. 24, 2012 07:43:19 AM, (user: jon)
//*>


#include "PassSM_pv.h"
#include <iostream>
#include "fir_filter.h"

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
PassSM_pv::PassSM_pv(sc_module_name module_name) 
  : PassSM_pv_base(module_name) {
  busy = 0;
  m_busy = false;
  PowerFactor = 100;
  SC_THREAD(thread);
} 

/////////////////////////////////////////////////////////////////////////////////
// Use these functions to define the behavior of your model when there is a 
// read event on one of the registers as defined in the Model Builder form.
// These functions are called before the read callbacks on the port.
///////////////////////////////////////////////////////////////////////////////// 

// Read callback for myreg register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int PassSM_pv::cb_read_myreg() {
  
  return myreg;
}
  

/////////////////////////////////////////////////////////////////////////////////
// Use these functions to define the behavior of your model when there is a 
// write event on one of the registers as defined in the Model Builder form.
// These functions are called before the write callbacks on the port.
///////////////////////////////////////////////////////////////////////////////// 

// Write callback for myreg register.
// The newValue has been already assigned to the myreg register.
void PassSM_pv::cb_write_myreg(unsigned int newValue) {
  
}
  
/////////////////////////////////////////////////////////////////////////////////
// Use these functions to define the behavior of your model when there is a  
// write/read event on one of memory io ranges as defined in the Model Builder form.
///////////////////////////////////////////////////////////////////////////////// 

// Write callback for mem memory range.
void PassSM_pv::cb_write_mem(uint64_t address, unsigned char* data, unsigned length) {
  
}

// Read callback for mem memory range.
void PassSM_pv::cb_read_mem(uint64_t address, unsigned char* data, unsigned length) {

}
 

// Read callback for d_in port.
// Returns true when successful.
bool PassSM_pv::d_in_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}


// Write callback for d_in port.
// Returns true when successful.
bool PassSM_pv::d_in_callback_write(mb_address_type address, unsigned char* data, unsigned size) {

  m_ds_i = new datastruct;
  memcpy((unsigned char *)m_ds_i, data, sizeof(datastruct));
  //m_ds_i = (datastruct *) data;
  busy = true;
  fifo_ds.put(m_ds_i);

  TP1 = 0;
  TP2 = 0;
  
  return true;
}

void PassSM_pv::thread() {
  ac_int<8> input, output;
  ac_int<8> coeffs_table[NUM_TAPS] = {10,20,30,40,40,30,20,10};

  for(;;) {
    m_ds_o = fifo_ds.peek();
    startSend = 1;
    d_out_write(0x0, (unsigned char *) m_ds_o, sizeof(datastruct));
    busy = false;
    fifo_ds.get();
    free(m_ds_o);
  }
}

unsigned PassSM_pv::d_in_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
}

unsigned PassSM_pv::d_in_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
}

bool PassSM_pv::d_in_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}


