
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2011     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for PPong.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.1.1
//* Generated on: Aug. 29, 2011 03:12:24 PM, (user: jon)
//* Automatically merged on: Sep. 26, 2011 07:41:21 AM, (user: jon)
//* Automatically merged on: Jan. 09, 2012 02:04:33 PM, (user: jon)
//* Automatically merged on: Jan. 20, 2012 09:12:45 AM, (user: jon)
//*>


#pragma once

#include "PPong_model.h"

using namespace tlm;

//This class inherits from the PPong_pv_base class
class PPong_pv : public PPong_pv_base {
 public:
  typedef esl::tlm_types::Address mb_address_type;
 public:
  // Constructor
  // Do not add parameters here.
  // To add parameters - use the Model Builder form (under PV->Parameters tab)
  SC_HAS_PROCESS(PPong_pv);
  PPong_pv(sc_core::sc_module_name module_name);   

  void thread();

 protected:
  ////////////////////////////////////////
  // target ports read callbacks
  //////////////////////////////////////// 
  bool d1_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  unsigned d1_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool d2_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  unsigned d2_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size); 

 protected:
  ////////////////////////////////////////
  // target ports write callbacks
  //////////////////////////////////////// 
  bool d1_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  unsigned d1_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool d1_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);
  bool d2_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  unsigned d2_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool d2_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);  

  tlm::tlm_fifo< unsigned char *> fifo;

  unsigned char *m_databuf1, *m_databuf2, *m_databuf;
  unsigned int m_writensize1, m_writensize2;
};

