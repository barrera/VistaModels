
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for PPong.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.1.1
//* Generated on: Aug. 29, 2011 03:12:24 PM, (user: jon)
//* Automatically merged on: Sep. 26, 2011 07:41:21 AM, (user: jon)
//* Automatically merged on: Jan. 24, 2012 07:43:19 AM, (user: jon)
//*>


#include "PPong_pv.h"
#include <iostream>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
PPong_pv::PPong_pv(sc_module_name module_name) 
  : PPong_pv_base(module_name) {

  m_databuf1 = new unsigned char [mBufSize];
  m_databuf2 = new unsigned char [mBufSize];

  fifo.nb_bound(mNumberBufs);

  SC_THREAD(thread);
}    

// Read callback for d1 port.
// Returns true when successful.
bool PPong_pv::d1_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}


// Read callback for d2 port.
// Returns true when successful.
bool PPong_pv::d2_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}

void PPong_pv::thread() {
  for(;;) {
    m_databuf = fifo.peek();
    y_write(0x0, m_databuf, mBufSize);
    fifo.get();
    free(m_databuf);
  }
}


// Write callback for d1 port.
// Returns true when successful.
bool PPong_pv::d1_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  unsigned int towrite = size;
  unsigned int writesize;
  unsigned char * tdata = data;

  while (towrite > 0) {
    if (m_writensize1 + towrite >= mBufSize) {
      writesize = mBufSize - m_writensize1;
      memcpy((void *) (m_databuf1 + m_writensize1), (void *)tdata, writesize);
      fifo.put(m_databuf1);
      m_databuf1 = new unsigned char [mBufSize];
      tdata = tdata + mBufSize;
      towrite -= mBufSize;
      m_writensize1 = 0;
    } else {
      memcpy(m_databuf1+m_writensize1, data, towrite);
      m_writensize1 = towrite;
      towrite = 0;
    }
  }
  return true;
}


// Write callback for d2 port.
// Returns true when successful.
bool PPong_pv::d2_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  unsigned int towrite = size;
  unsigned int writesize;
  unsigned char * tdata = data;

  while (towrite > 0) {
    if (m_writensize2 + towrite >= mBufSize) {
      writesize = mBufSize - m_writensize2;
      memcpy((void *) (m_databuf2 + m_writensize2), (void *)tdata, writesize);
      fifo.put(m_databuf2);
      m_databuf2 = new unsigned char [mBufSize];
      tdata = tdata + mBufSize;
      towrite -= mBufSize;
      m_writensize2 = 0;
    } else {
      memcpy(m_databuf2+m_writensize2, data, towrite);
      m_writensize2 = towrite;
      towrite = 0;
    }
  }
  return true;
}


unsigned PPong_pv::d1_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
}

unsigned PPong_pv::d1_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
}

bool PPong_pv::d1_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}



unsigned PPong_pv::d2_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
}

unsigned PPong_pv::d2_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
}

bool PPong_pv::d2_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}


