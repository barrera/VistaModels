
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2009     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/


/* Generated by Model Builder  */

#ifndef __axi_h__
#define __axi_h__

#include "esl/sc_sim/PapoulisEvent.h"

class axi_blocking_if : public virtual sc_interface
{
public:
  virtual void READ(unsigned long long delay, long TR_ID, long ARADDR, long* RDATA, long& burstSize, long ARSIZE, long block_size, long ARBURST, long ARLEN, long ARLOCK) = 0;
  virtual void WRITE(unsigned long long delay, long TR_ID, long AWADDR, const long* WDATA, long& burstSize, long AWSIZE, long block_size, long AWBURST, long AWLEN, long AWLOCK) = 0;
virtual unsigned long long getClock() = 0;
};

class axi_non_blocking_if : public virtual sc_interface
{
public:
  virtual void nb_READ(unsigned long long delay, long TR_ID, long ARADDR, long* RDATA, long& burstSize, long ARSIZE, long block_size, long ARBURST, long ARLEN, long ARLOCK) = 0;
  virtual void nb_WRITE(unsigned long long delay, long TR_ID, long AWADDR, const long* WDATA, long& burstSize, long AWSIZE, long block_size, long AWBURST, long AWLEN, long AWLOCK) = 0;
  virtual const PapoulisEvent& endTransaction() = 0;
  virtual const PapoulisEvent& endAllTransactions() = 0;
  virtual bool canInitiateTransaction() = 0;
  virtual unsigned long long getClock() = 0;
};

#include "esl/sc_sim/SystemCBaseModel.h"
#include "esl/sc_sim/utls.h"
#include "mb/sysc/parameters.h"
#include "esl/sc_sim/GenericPort.h"

DECLARE_EXTENDED_PHASE(axi_wait_writeData_req);
DECLARE_EXTENDED_PHASE(axi_end_wait_writeData_req);
#endif
